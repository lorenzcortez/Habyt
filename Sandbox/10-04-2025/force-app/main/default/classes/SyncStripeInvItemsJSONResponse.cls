//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class SyncStripeInvItemsJSONResponse {

    public String object_Z {get;set;} // in json: object
    public List<InvoiceItem> data {get;set;} 
    public Boolean has_more {get;set;} 
    public String url {get;set;} 

    public class Price {
        public String id {get;set;} 
        public String object_Z {get;set;} // in json: object
        public Boolean active {get;set;} 
        public String billing_scheme {get;set;} 
        public Integer created {get;set;} 
        public String currency_Z {get;set;} // in json: currency
        public Boolean livemode {get;set;} 
        public Object lookup_key {get;set;} 
        public Discounts metadata {get;set;} 
        public Object nickname {get;set;} 
        public String product {get;set;} 
        public Recurring recurring {get;set;} 
        public String tax_behavior {get;set;} 
        public Object tiers_mode {get;set;} 
        public Object transform_quantity {get;set;} 
        public String type {get;set;} 
        public Integer unit_amount {get;set;} 
        public String unit_amount_decimal {get;set;} 

        public Price(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'object') {
                            object_Z = parser.getText();
                        } else if (text == 'active') {
                            active = parser.getBooleanValue();
                        } else if (text == 'billing_scheme') {
                            billing_scheme = parser.getText();
                        } else if (text == 'created') {
                            created = parser.getIntegerValue();
                        } else if (text == 'currency') {
                            currency_Z = parser.getText();
                        } else if (text == 'livemode') {
                            livemode = parser.getBooleanValue();
                        } else if (text == 'lookup_key') {
                            lookup_key = parser.readValueAs(Object.class);
                        } else if (text == 'metadata') {
                            metadata = new Discounts(parser);
                        } else if (text == 'nickname') {
                            nickname = parser.readValueAs(Object.class);
                        } else if (text == 'product') {
                            product = parser.getText();
                        } else if (text == 'recurring') {
                            recurring = new Recurring(parser);
                        } else if (text == 'tax_behavior') {
                            tax_behavior = parser.getText();
                        } else if (text == 'tiers_mode') {
                            tiers_mode = parser.readValueAs(Object.class);
                        } else if (text == 'transform_quantity') {
                            transform_quantity = parser.readValueAs(Object.class);
                        } else if (text == 'type') {
                            type = parser.getText();
                        } else if (text == 'unit_amount') {
                            unit_amount = parser.getIntegerValue();
                        } else if (text == 'unit_amount_decimal') {
                            unit_amount_decimal = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Price consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Recurring {
        public Object aggregate_usage {get;set;} 
        public String interval {get;set;} 
        public Integer interval_count {get;set;} 
        public Object trial_period_days {get;set;} 
        public String usage_type {get;set;} 

        public Recurring(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'aggregate_usage') {
                            aggregate_usage = parser.readValueAs(Object.class);
                        } else if (text == 'interval') {
                            interval = parser.getText();
                        } else if (text == 'interval_count') {
                            interval_count = parser.getIntegerValue();
                        } else if (text == 'trial_period_days') {
                            trial_period_days = parser.readValueAs(Object.class);
                        } else if (text == 'usage_type') {
                            usage_type = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Recurring consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Period {
        public Integer end_Z {get;set;} // in json: end
        public Integer start {get;set;} 

        public Period(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'end') {
                            end_Z = parser.getIntegerValue();
                        } else if (text == 'start') {
                            start = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Period consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Discounts {

        public Discounts(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Discounts consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class InvoiceItem {
        public String id {get;set;} 
        public String object_Z {get;set;} // in json: object
        public Decimal amount {get;set;} 
        public String currency_Z {get;set;} // in json: currency
        public String customer {get;set;} 
        public Integer date_Z {get;set;} // in json: date
        public String description {get;set;} 
        public Boolean discountable {get;set;} 
        public List<Discounts> discounts {get;set;} 
        public String invoice {get;set;} 
        public Boolean livemode {get;set;} 
        public Discounts metadata {get;set;} 
        public Period period {get;set;} 
        public Plan plan {get;set;} 
        public Price price {get;set;} 
        public Boolean proration {get;set;} 
        public Integer quantity {get;set;} 
        public String subscription {get;set;}
		public String subscription_item {get;set;}
        public List<Discounts> tax_rates {get;set;} 
        public Object test_clock {get;set;} 
        public Integer unit_amount {get;set;} 
        public String unit_amount_decimal {get;set;} 

        public InvoiceItem(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'object') {
                            object_Z = parser.getText();
                        } else if (text == 'amount') {
                            amount = parser.getDecimalValue();
                        } else if (text == 'currency') {
                            currency_Z = parser.getText();
                        } else if (text == 'customer') {
                            customer = parser.getText();
                        } else if (text == 'date') {
                            date_Z = parser.getIntegerValue();
                        } else if (text == 'description') {
                            description = parser.getText();
                        } else if (text == 'discountable') {
                            discountable = parser.getBooleanValue();
                        } else if (text == 'discounts') {
                            discounts = arrayOfDiscounts(parser);
                        } else if (text == 'invoice') {
                            invoice = parser.getText();
                        } else if (text == 'livemode') {
                            livemode = parser.getBooleanValue();
                        } else if (text == 'metadata') {
                            metadata = new Discounts(parser);
                        } else if (text == 'period') {
                            period = new Period(parser);
                        } else if (text == 'plan') {
                            plan = new Plan(parser);
                        } else if (text == 'price') {
                            price = new Price(parser);
                        } else if (text == 'proration') {
                            proration = parser.getBooleanValue();
                        } else if (text == 'quantity') {
                            quantity = parser.getIntegerValue();
                        } else if (text == 'subscription') {
							subscription = parser.getText();
						} else if (text == 'subscription_item') {
							subscription_item = parser.getText();
                        } else if (text == 'tax_rates') {
                            tax_rates = arrayOfDiscounts(parser);
                        } else if (text == 'test_clock') {
                            test_clock = parser.readValueAs(Object.class);
                        } else if (text == 'unit_amount') {
                            unit_amount = parser.getIntegerValue();
                        } else if (text == 'unit_amount_decimal') {
                            unit_amount_decimal = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'InvoiceItem consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Plan {
        public String id {get;set;} 
        public String object_Z {get;set;} // in json: object
        public Boolean active {get;set;} 
        public Object aggregate_usage {get;set;} 
        public Integer amount {get;set;} 
        public String amount_decimal {get;set;} 
        public String billing_scheme {get;set;} 
        public Integer created {get;set;} 
        public String currency_Z {get;set;} // in json: currency
        public String interval {get;set;} 
        public Integer interval_count {get;set;} 
        public Boolean livemode {get;set;} 
        public Discounts metadata {get;set;} 
        public Object nickname {get;set;} 
        public String product {get;set;} 
        public Object tiers {get;set;} 
        public Object tiers_mode {get;set;} 
        public Object transform_usage {get;set;} 
        public Object trial_period_days {get;set;} 
        public String usage_type {get;set;} 

        public Plan(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'object') {
                            object_Z = parser.getText();
                        } else if (text == 'active') {
                            active = parser.getBooleanValue();
                        } else if (text == 'aggregate_usage') {
                            aggregate_usage = parser.readValueAs(Object.class);
                        } else if (text == 'amount') {
                            amount = parser.getIntegerValue();
                        } else if (text == 'amount_decimal') {
                            amount_decimal = parser.getText();
                        } else if (text == 'billing_scheme') {
                            billing_scheme = parser.getText();
                        } else if (text == 'created') {
                            created = parser.getIntegerValue();
                        } else if (text == 'currency') {
                            currency_Z = parser.getText();
                        } else if (text == 'interval') {
                            interval = parser.getText();
                        } else if (text == 'interval_count') {
                            interval_count = parser.getIntegerValue();
                        } else if (text == 'livemode') {
                            livemode = parser.getBooleanValue();
                        } else if (text == 'metadata') {
                            metadata = new Discounts(parser);
                        } else if (text == 'nickname') {
                            nickname = parser.readValueAs(Object.class);
                        } else if (text == 'product') {
                            product = parser.getText();
                        } else if (text == 'tiers') {
                            tiers = parser.readValueAs(Object.class);
                        } else if (text == 'tiers_mode') {
                            tiers_mode = parser.readValueAs(Object.class);
                        } else if (text == 'transform_usage') {
                            transform_usage = parser.readValueAs(Object.class);
                        } else if (text == 'trial_period_days') {
                            trial_period_days = parser.readValueAs(Object.class);
                        } else if (text == 'usage_type') {
                            usage_type = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Plan consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public SyncStripeInvItemsJSONResponse(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'object') {
                        object_Z = parser.getText();
                    } else if (text == 'data') {
                        data = arrayOfInvoiceItem(parser);
                    } else if (text == 'has_more') {
                        has_more = parser.getBooleanValue();
                    } else if (text == 'url') {
                        url = parser.getText();
                    } else {
                        System.debug(LoggingLevel.WARN, 'SyncStripeInvItemsJSONResponse consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
        
    public static SyncStripeInvItemsJSONResponse parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new SyncStripeInvItemsJSONResponse(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }
    
    private static List<InvoiceItem> arrayOfInvoiceItem(System.JSONParser p) {
        List<InvoiceItem> res = new List<InvoiceItem>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new InvoiceItem(p));
        }
        return res;
    }

    private static List<Discounts> arrayOfDiscounts(System.JSONParser p) {
        List<Discounts> res = new List<Discounts>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Discounts(p));
        }
        return res;
    }
}